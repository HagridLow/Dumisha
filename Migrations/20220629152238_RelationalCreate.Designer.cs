// <auto-generated />
using System;
using API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220629152238_RelationalCreate")]
    partial class RelationalCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("API.Entities.AlbumRaters", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AlbumId")
                        .HasColumnType("TEXT");

                    b.HasKey("AppUserId", "AlbumId");

                    b.HasIndex("AlbumId");

                    b.ToTable("AlbumRaters");
                });

            modelBuilder.Entity("API.Entities.AlbumStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AlbumStatuses");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("API.Entities.SpotifyAlbum", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Artist")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalTracks")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("SpotifyAlbums");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SpotifyAlbum");
                });

            modelBuilder.Entity("API.Entities.SpotifyAlbumRated", b =>
                {
                    b.HasBaseType("API.Entities.SpotifyAlbum");

                    b.Property<int>("AlbumStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.HasIndex("AlbumStatusId");

                    b.HasDiscriminator().HasValue("SpotifyAlbumRated");
                });

            modelBuilder.Entity("API.Entities.AlbumRaters", b =>
                {
                    b.HasOne("API.Entities.SpotifyAlbumRated", "SpotifyAlbumRated")
                        .WithMany("Raters")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "AppUser")
                        .WithMany("SpotifyAlbumRateds")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("SpotifyAlbumRated");
                });

            modelBuilder.Entity("API.Entities.SpotifyAlbumRated", b =>
                {
                    b.HasOne("API.Entities.AlbumStatus", "AlbumStatus")
                        .WithMany()
                        .HasForeignKey("AlbumStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlbumStatus");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("SpotifyAlbumRateds");
                });

            modelBuilder.Entity("API.Entities.SpotifyAlbumRated", b =>
                {
                    b.Navigation("Raters");
                });
#pragma warning restore 612, 618
        }
    }
}
